import json
import os
import sqlite3
import requests
import telebot
from dotenv import load_dotenv
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import schedule
import time
import threading


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
bot = telebot.TeleBot(os.environ.get('TELEGRAM_TOKEN'))

# –ó–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –º—ñ—Å—Ç
city_coordinates = {
    "–ö–∏—ó–≤": {"lat": 50.4501, "lon": 30.5234},
    "–õ—å–≤—ñ–≤": {"lat": 49.8397, "lon": 24.0297},
    "–û–¥–µ—Å–∞": {"lat": 46.4825, "lon": 30.7233},
    "–•–∞—Ä–∫—ñ–≤": {"lat": 49.9935, "lon": 36.2304},
    "–î–Ω—ñ–ø—Ä–æ": {"lat": 48.4647, "lon": 35.0462}
}

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def send_welcome(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_surname = message.from_user.last_name
    conn = None

    try:
        conn = sqlite3.connect("db/database.db")
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        if not user:
            cursor.execute(
                "INSERT INTO users (user_id, user_name, user_surname) VALUES (?, ?, ?)",
                (user_id, user_name, user_surname)
            )
            conn.commit()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            KeyboardButton("–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞"),
            KeyboardButton("–©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑"),
            KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ"),
            KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤")
        ]
        keyboard.add(*buttons)

        bot.reply_to(message, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø–æ–≥–æ–¥–∏. –í–∏–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=keyboard)

    except Exception as err:
        print("error", err)
        bot.reply_to(message, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ!")
    finally:
        if conn:
            conn.close()

def show_city_selection_buttons(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        KeyboardButton("–ö–∏—ó–≤"),
        KeyboardButton("–õ—å–≤—ñ–≤"),
        KeyboardButton("–û–¥–µ—Å–∞"),
        KeyboardButton("–•–∞—Ä–∫—ñ–≤"),
        KeyboardButton("–î–Ω—ñ–ø—Ä–æ"),
        KeyboardButton("–Ü–Ω—à–µ")
    ]
    keyboard.add(*buttons)
    bot.reply_to(message, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ –º—ñ—Å—Ç–æ –∑ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫:", reply_markup=keyboard)

def get_weather_for_existing_city_to_user(user_id, city_name):
    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
    coordinates = city_coordinates.get(city_name)

    if coordinates:
        url = (
            f"https://api.openweathermap.org/data/3.0/onecall"
            f"?lat={coordinates['lat']}&lon={coordinates['lon']}&appid={os.environ.get('OPEN_WEATHER_TOKEN')}&units=metric&lang=uk"
        )

        try:
            response = requests.get(url)
            if response.status_code == 200:
                data = json.loads(response.text)
                weather = data['current']['weather'][0]['description'].capitalize()
                temp = data['current']['temp']
                wind_speed = data['current']['wind_speed']
                date = datetime.now().strftime("%d.%m.%y")

                weather_message = (
                    f"–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ {city_name}: –Ω–∞ {date}\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"–û–ø–∏—Å: {weather}\n"
                    f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –∫–º/–≥–æ–¥"
                )

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                bot.send_message(user_id, weather_message)
            else:
                bot.send_message(user_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        except Exception as err:
            print("Error:", err)
            bot.send_message(user_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞")
def show_current_weather(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("db/database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    city = cursor.fetchone()
    conn.close()

    if city and city[0]:
        city_name = city[0]
        get_weather_for_existing_city_to_user(user_id, city_name)
    else:
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –º—ñ—Å—Ç–∞, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
        bot.reply_to(message, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞. –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑–∞—Ä–∞–∑:")
        show_city_selection_buttons(message)

def get_weather_for_existing_city(message: Message, city_name: str):
    coordinates = city_coordinates[city_name]

    url = (
        f"https://api.openweathermap.org/data/3.0/onecall"
        f"?lat={coordinates['lat']}&lon={coordinates['lon']}&appid={os.environ.get('OPEN_WEATHER_TOKEN')}&units=metric&lang=uk"
    )

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = json.loads(response.text)
            weather = data['current']['weather'][0]['description'].capitalize()
            temp = data['current']['temp']
            wind_speed = data['current']['wind_speed']
            date = datetime.now().strftime("%d.%m.%y")

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ {city_name}: –Ω–∞ {date}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                f"–û–ø–∏—Å: {weather}\n"
                f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –∫–º/–≥–æ–¥"
            )
            bot.reply_to(message, weather_message)
        else:
            bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as err:
        print("Error:", err)
        bot.reply_to(message, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@bot.message_handler(func=lambda message: message.text in city_coordinates)
def get_weather(message: Message):
    city_name = message.text
    coordinates = city_coordinates[city_name]

    user_id = message.from_user.id
    conn = sqlite3.connect("db/database.db")
    cursor = conn.cursor()

    cursor.execute("UPDATE users SET city = ? WHERE user_id = ?", (city_name, user_id))
    conn.commit()
    conn.close()

    url = (
        f"https://api.openweathermap.org/data/3.0/onecall"
        f"?lat={coordinates['lat']}&lon={coordinates['lon']}&appid={os.environ.get('OPEN_WEATHER_TOKEN')}&units=metric&lang=uk"
    )

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = json.loads(response.text)
            weather = data['current']['weather'][0]['description'].capitalize()
            temp = data['current']['temp']
            wind_speed = data['current']['wind_speed']
            date = datetime.now().strftime("%d.%m.%y")

            weather_message = (
                f"–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ {city_name}: –Ω–∞ {date}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                f"–û–ø–∏—Å: {weather}\n"
                f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –∫–º/–≥–æ–¥"
            )
            bot.reply_to(message, weather_message)
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            back_button = KeyboardButton("–ù–∞–∑–∞–¥")
            keyboard.add(back_button)
            bot.send_message(message.chat.id, "–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=keyboard)
        else:
            bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as err:
        print("Error:", err)
        bot.reply_to(message, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_to_main_menu(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        KeyboardButton("–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞"),
        KeyboardButton("–©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑"),
        KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ"),
        KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤"),
    ]
    keyboard.add(*buttons)
    bot.reply_to(message, "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ")
def change_city(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("db/database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    city = cursor.fetchone()
    conn.close()

    if city and city[0]:
        bot.reply_to(message, f"–í–∞—à–µ –æ–±—Ä–∞–Ω–µ –º—ñ—Å—Ç–æ: {city[0]}. –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–µ –º—ñ—Å—Ç–æ:")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞. –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑–∞—Ä–∞–∑:")
    show_city_selection_buttons(message)

@bot.message_handler(func=lambda message: message.text == "–©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑")
def subscribe_daily_forecast(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("db/database.db")
    cursor = conn.cursor()

    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞–∂–∞–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    cursor.execute("UPDATE users SET daily_forecast = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    bot.reply_to(message, "–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑. –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ 10:00 —Ä–∞–Ω–∫—É –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è.")

def send_daily_forecasts():
    conn = sqlite3.connect("db/database.db")
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    cursor.execute("SELECT user_id, city FROM users WHERE daily_forecast = 1")
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id, city_name = user
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        get_weather_for_existing_city_to_user(user_id, city_name)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤")
def show_daily_forecast(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("db/database.db")
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ –º—ñ—Å—Ç–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cursor.execute("SELECT city FROM users WHERE user_id = ?", (user_id,))
    city = cursor.fetchone()
    conn.close()

    if city and city[0]:
        city_name = city[0]
        get_weather_forecast_for_city(message, city_name)
    else:
        bot.reply_to(message, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞. –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑–∞—Ä–∞–∑:")
        show_city_selection_buttons(message)


def get_weather_forecast_for_city(message: Message, city_name: str):
    coordinates = city_coordinates[city_name]

    url = (
        f"https://api.openweathermap.org/data/3.0/onecall"
        f"?lat={coordinates['lat']}&lon={coordinates['lon']}&appid={os.environ.get('OPEN_WEATHER_TOKEN')}&units=metric&exclude=current,minutely,hourly,alerts&lang=uk"
    )

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = json.loads(response.text)
            daily_forecasts = data['daily']

            forecast_message = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤ –¥–ª—è –º—ñ—Å—Ç–∞ {city_name}:\n\n"
            for day in daily_forecasts[:7]:  # –û–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—ñ 7 –¥–Ω—ñ–≤
                date = datetime.fromtimestamp(day['dt']).strftime('%d.%m.%Y')
                temp_day = day['temp']['day']
                weather_description = day['weather'][0]['description'].capitalize()
                forecast_message += f"{date}: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_day}¬∞C, –û–ø–∏—Å: {weather_description}\n"

            bot.reply_to(message, forecast_message)
        else:
            bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as err:
        print("Error:", err)
        bot.reply_to(message, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

@bot.message_handler(func=lambda message: message.text == "–Ü–Ω—à–µ")
def ask_for_city(message: Message):
    bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞:")

@bot.message_handler(func=lambda message: message.text not in city_coordinates and message.text != "–Ü–Ω—à–µ")
def get_weather_for_custom_city(message: Message):
    city_name = message.text

    try:
        resp = requests.get(
            f"http://api.openweathermap.org/geo/1.0/direct?q={city_name}&appid={os.environ.get('OPEN_WEATHER_TOKEN')}"
        )
        if resp.status_code == 200 and len(resp.json()) > 0:
            data = resp.json()[0]
            lat, lon = data['lat'], data['lon']

            url = (
                f"https://api.openweathermap.org/data/3.0/onecall"
                f"?lat={lat}&lon={lon}&appid={os.environ.get('OPEN_WEATHER_TOKEN')}&units=metric&lang=uk"
            )
            response = requests.get(url)
            if response.status_code == 200:
                data = json.loads(response.text)
                weather = data['current']['weather'][0]['description'].capitalize()
                temp = data['current']['temp']
                wind_speed = data['current']['wind_speed']
                date = datetime.now().strftime("%d.%m.%y")

                weather_message = (
                    f"–ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ {city_name}: –Ω–∞ {date}\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"–û–ø–∏—Å: {weather}\n"
                    f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –∫–º/–≥–æ–¥"
                )
                bot.reply_to(message, weather_message)
            else:
                bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        else:
            bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ç–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è.")
    except Exception as err:
        print("Error:", err)
        bot.reply_to(message, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()

bot.infinity_polling()
